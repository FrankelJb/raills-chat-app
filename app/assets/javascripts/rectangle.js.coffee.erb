@init_dropzone = ->
  Dropzone.autoDiscover = false

  $('html').on('dragbetterenter', ->
    dropzone = $("#canvas").dropzone({
      url: '<%= Rails.application.routes.url_helpers.rectangle_import_background_path %>',
      params: { authenticity_token: $('meta[name="csrf-token"]').attr('content')  }
      acceptedFiles: "image/jpeg,image/png,image/jpg",
      init: ->
        @on("error", ->
          alert('Please try and use a jpg, jpeg or png rather.')
        )
        @on('success', (response) ->
          $('#right').find('div').remove()
          $('#right').append(response.xhr.responseText)
          update_scroll_images()
        )
    })
    $(".dz-hidden-input").prop("disabled", true)

  ).on('html', ->
    Dropone.forElement("#canvas").destroy()
    $('#canvas').removeClass('outline')
  )

  $('#canvas').on('dragbetterenter', ->
    $('#canvas').addClass('outline')
  ).on('dragbetterleave', ->
    $('#canvas').removeClass('outline')
  )


Shape = (state, x, y, w, h, fill, is_first) ->
  "use strict"
  @state = state
  @x = x || 0
  @y = y || 0
  @w = w || 1
  @h = h || 1
  @fill = fill || '#AAAAAA'
  @is_first = is_first
  return

Shape::draw = (ctx, optionalColor) ->
  "use strict"
  ctx.fillStyle = @fill
  ctx.fillRect(@x, @y, @w, @h)

  if @state.selection == this || @is_first
    @is_first = false
    json = { rectangles: { x: @x, y: @y, width: @w, height: @h } }
    if $('input[name=radioName]:checked', '#radio_buttons').val() == 'json'
      $('#rectangle_details').text(JSON.stringify json )
    else if $('input[name=radioName]:checked', '#radio_buttons').val() == 'xml'
      xml = json_2_xml json
      $('#rectangle_details').text( xml )

    ctx.strokeStyle = @state.selectionColour
    ctx.lineWidth = @state.selectionWidth
    ctx.strokeRect(@x, @y, @w, @h)
    
    # draw the boxes
    half = @state.selectionBoxSize / 2
    
     # 0  1  2
     # 3     4
     # 5  6  7
    
    # top left, middle, right
    @state.selectionHandles[0].x = @x-half
    @state.selectionHandles[0].y = @y-half
    
    @state.selectionHandles[1].x = @x+@w/2-half
    @state.selectionHandles[1].y = @y-half
    
    @state.selectionHandles[2].x = @x+@w-half
    @state.selectionHandles[2].y = @y-half
    
    # middle left
    @state.selectionHandles[3].x = @x-half
    @state.selectionHandles[3].y = @y+@h/2-half
    
    # middle right
    @state.selectionHandles[4].x = @x+@w-half
    @state.selectionHandles[4].y = @y+@h/2-half
    
    # bottom left, middle, right
    @state.selectionHandles[6].x = @x+@w/2-half
    @state.selectionHandles[6].y = @y+@h-half
    
    @state.selectionHandles[5].x = @x-half
    @state.selectionHandles[5].y = @y+@h-half
    
    @state.selectionHandles[7].x = @x+@w-half
    @state.selectionHandles[7].y = @y+@h-half
    
    ctx.fillStyle = @state.selectionBoxColour
    i = 0
    while i < 8
      cur = @state.selectionHandles[i]
      ctx.fillRect(cur.x, cur.y, @state.selectionBoxSize, @state.selectionBoxSize)
      i++

  return

Shape::contains = (mx, my) ->
  "use strict"
  return (@x <= mx) && (@x + @w >= mx) &&
    (@y <= my) && (@y + @h >= my)

CanvasState = (canvas) ->
  "use strict"
  @canvas = canvas
  @width = canvas.width
  @height = canvas.height
  @ctx = canvas.getContext('2d')

  if document.defaultView and document.defaultView.getComputedStyle
    @stylePaddingLeft = parseInt(document.defaultView.getComputedStyle(canvas, null)['paddingLeft'], 10) or 0
    @stylePaddingTop = parseInt(document.defaultView.getComputedStyle(canvas, null)['paddingTop'], 10) or 0
    @styleBorderLeft = parseInt(document.defaultView.getComputedStyle(canvas, null)['borderLeftWidth'], 10) or 0
    @styleBorderTop = parseInt(document.defaultView.getComputedStyle(canvas, null)['borderTopWidth'], 10) or 0


  html = document.body.parentNode
  @htmlTop = html.offsetTop
  @htmlLeft = html.offsetLeft
  @valid = false
  @shapes = []
  @dragging = false
  @resizeDragging = false
  @expectResize = -1
  @selection = null
  @dragoffx = 0
  @dragoffy = 0

  @selectionHandles = []
  i = 0
  while i < 8
    @selectionHandles.push(new Shape(this))
    i++

  myState = this

  canvas.addEventListener 'selectstart', ((e) ->
    e.preventDefault()
    false
  ), false

  canvas.addEventListener 'mousedown', ((e) ->
    if myState.expectResize != -1
      myState.resizeDragging = true
      return

    mouse = myState.getMouse(e)
    mx = mouse.x
    my = mouse.y
    shapes = myState.shapes
    l = shapes.length
    i = l - 1
    while i >= 0
      if shapes[i].contains(mx, my)
        mySel = shapes[i]
        myState.dragoffx = mx - (mySel.x)
        myState.dragoffy = my - (mySel.y)
        myState.dragging = true
        myState.selection = mySel
        myState.valid = false
        return
      i--

    if myState.selection
      myState.selection = null
      myState.valid = false
      return

    ), true

  canvas.addEventListener 'mousemove', ((e) ->
    mouse = myState.getMouse(e)
    mx = mouse.x
    my = mouse.y
    if myState.dragging
      myState.selection.x = mouse.x - myState.dragoffx
      myState.selection.y = mouse.y - myState.dragoffy
      myState.valid = false
    else if myState.resizeDragging
      oldx = myState.selection.x
      oldy = myState.selection.y

      # 0  1  2
      # 3     4
      # 5  6  7
      switch myState.expectResize
        when 0
          myState.selection.x = mx
          myState.selection.y = my
          myState.selection.w += oldx - mx
          myState.selection.h += oldy - my
        when 1
          myState.selection.y = my
          myState.selection.h += oldy - my
        when 2
          myState.selection.y = my
          myState.selection.w = mx - oldx
          myState.selection.h += oldy - my
        when 3
          myState.selection.x = mx
          myState.selection.w += oldx - mx
        when 4
          myState.selection.w = mx - oldx
        when 5
          myState.selection.x = mx
          myState.selection.w += oldx - mx
          myState.selection.h = my - oldy
        when 6
          myState.selection.h = my - oldy
        when 7
          myState.selection.w = mx - oldx
          myState.selection.h = my - oldy

      myState.valid = false

    if myState.selection != null && !myState.resizeDragging
      i = 0
      while i < 8
        cur = myState.selectionHandles[i]

        if mx >= cur.x && mx <= cur.x + myState.selectionBoxSize && my >= cur.y && my <= cur.y + myState.selectionBoxSize
          
          myState.expectResize = i
          myState.valid = false

          switch i
            when 0
              @style.cursor='nw-resize'
            when 1
              @style.cursor='n-resize'
            when 2
              @style.cursor='ne-resize'
            when 3
              @style.cursor='w-resize'
            when 4
              @style.cursor='e-resize'
            when 5
              @style.cursor='sw-resize'
            when 6
              @style.cursor='s-resize'
            when 7
              @style.cursor='se-resize'
          return
        i++

      myState.resizeDragging = false
      myState.expectResize = -1
      @style.cursor = 'auto'
    return
  ), true

  canvas.addEventListener 'mouseup', ((e) ->
    myState.dragging = false
    myState.resizeDragging = false
    myState.expectResize = -1
    if myState.selection != null
      if myState.selection.w < 0
        myState.selection.w = -myState.selection.w
        myState.selection.x -= myState.selection.w
      if myState.selection.h < 0
        myState.selection.h = -myState.selection.h
        myState.selection.y -= myState.selection.h
    return
  ), true

  canvas.addEventListener 'dblclick', ((e) ->
    console.log('dblclick')
    mouse = myState.getMouse(e)
    myState.addShape new Shape(myState, mouse.x - 10, mouse.y - 10, 20, 20, 'rgba(0, 255,0, .6)')
    return
  ), true

  @selectionColour = '#CC0000'
  @selectionWidth = 2
  @selectionBoxSize = 6
  @selectionBoxColour = 'darkred'
  @interval = 30
  setInterval (->
    myState.draw()
    return
  ), myState.interval

CanvasState::addShape = (shape) ->
  @shapes.push shape
  @valid = false
  return

CanvasState::clear = ->
  @ctx.clearRect(0, 0, @width, @height)
  return

CanvasState::draw = ->
  "use strict"
  if !@valid
    ctx = @ctx
    shapes = @shapes
    @clear()

    l = shapes.length
    i = 0
    while i < l
      shape = shapes[i]
      if shape.x <= @width || shape.y <= @height || shape.x + shape.w >= 0 || shape.y + shape.h >= 0
        shapes[i].draw(ctx)
      i++

    if @selection != null
      ctx.strokeStyle = @selectionColour
      ctx.lineWidth = @selectionWidth
      mySel = @selection
      ctx.strokeRect(mySel.x, mySel.y, mySel.w, mySel.h)

    @valid = true
    return

CanvasState::getMouse = (e) ->
  element = @canvas
  offsetX = 0
  offsetY = 0

  if element.offsetParent != undefined
    loop
      offsetX += element.offsetLeft
      offsetY += element.offsetTop
      element = element.offsetParent
      unless element
        break

  offsetX += @stylePaddingLeft + @styleBorderLeft + @htmlLeft
  offsetY += @stylePaddingTop + @styleBorderTop + @htmlTop

  mx = e.pageX - offsetX
  my = e.pageY - offsetY

  return { x: mx, y: my }
        
@init = ->
  console.log('initing')
  s = new CanvasState(document.getElementById('canvas'))
  s.addShape(new Shape(s, 70,150,160,130, 'rgba(127, 255, 212, .5)', true))

update_scroll_images = ->
    if $('.scroll_images_div').length > 0
      $('#canvas').css( {'background': "url(" + ($($('.scroll_images')[0]).prop('src')) + ")", 'background-size': '720px 576px' } )
    $('.scroll_images').click ->
      $('#canvas').css( {'background': "url(" + $(@).prop('src') + ")", 'background-size': '720px 576px' } )
    $('.scroll_images_div > .glyphicon').click ->
      cur_glyphicon = @
      $.post(
        '/rectangle/delete_background'
        src: $(cur_glyphicon).siblings('img').prop('name')
        'json'
      ).done ->
        $(cur_glyphicon).closest('div').slideUp('slow', ->
          $(cur_glyphicon).closest('div').remove()
          if $('.scroll_images_div').length > 0
            $('#canvas').css( {'background': "url(" + ($($('.scroll_images')[0]).prop('src')) + ")", 'background-size': '720px 576px' } )
          else
            $('#canvas').css( {'background': "", 'background-size': '720px 576px' } )
        )
  
json_2_xml = (data) ->
  xml = '<rectangle>'
  $.each(data, (key, rectangle) ->
    $.each(rectangle, (key, value) ->
      xml += '<' + key + '>' + value + '</' + key + '>'
    )
  )
  xml += '</rectangle>'

attach_event_to_radio = ->
  $('#radio_buttons').change ->
    if $('input[name=radioName]:checked', '#radio_buttons').val() == 'json'
      rectangle = $($.parseXML($('#rectangle_details').text())).find('rectangle')
      json = { rectangle: {} }
      rectangle.each ->
        json['rectangle']['x'] = $(@).find('x').text()
        console.log(json)
        json['rectangle']['y'] = $(@).find('y').text()
        json['rectangle']['width'] = $(@).find('width').text()
        json['rectangle']['height'] = $(@).find('height').text()
      $('#rectangle_details').text( JSON.stringify json )
      
    else if $('input[name=radioName]:checked', '#radio_buttons').val() == 'xml'
      json = JSON.parse $('#rectangle_details').text()
      xml = json_2_xml json
      $('#rectangle_details').text( xml )

$ ->
  h = $(window).height()
  update_scroll_images()
  attach_event_to_radio()

